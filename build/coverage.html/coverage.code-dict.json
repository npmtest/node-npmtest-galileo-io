{"/home/travis/build/npmtest/node-npmtest-galileo-io/test.js":"/* istanbul instrument in package npmtest_galileo_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-galileo-io/lib.npmtest_galileo_io.js":"/* istanbul instrument in package npmtest_galileo_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_galileo_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_galileo_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-galileo-io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-galileo-io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_galileo_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_galileo_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_galileo_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_galileo_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_galileo_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_galileo_io.__dirname + '/lib.npmtest_galileo_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/lib/index.js":"require(\"es6-shim\");\n\nvar IS_TEST_ENV = global.IS_TEST_ENV || false;\nvar Emitter = require(\"events\").EventEmitter;\nvar Pin = require(\"./pin\");\n\nvar modes = Object.freeze({\n  INPUT: 0,\n  OUTPUT: 1,\n  ANALOG: 2,\n  PWM: 3,\n  SERVO: 4\n});\n\nvar aref = 5;\nvar vref = 5;\n\n// This is the default for:\n//   - Galileo 1 (no longer supported)\n//   - Galileo 2\n//   - Edision Arduino Board\n//\nvar pinModes = [\n  { modes: [0, 1] },\n  { modes: [0, 1] },\n  { modes: [0, 1] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1] },\n  { modes: [0, 1] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1, 3, 4] },\n  { modes: [0, 1] },\n  { modes: [0, 1] },\n  { modes: [0, 1, 2], analogChannel: 0 },\n  { modes: [0, 1, 2], analogChannel: 1 },\n  { modes: [0, 1, 2], analogChannel: 2 },\n  { modes: [0, 1, 2], analogChannel: 3 },\n  { modes: [0, 1, 2], analogChannel: 4 },\n  { modes: [0, 1, 2], analogChannel: 5 }\n];\n\nvar isMiniboard = false;\nvar isCarrierboard = false;\nvar platformType = Pin.IO.getPlatformType();\nvar platformPinMapping = require(\"./pin-mapping/\")[platformType];\n\nif (platformType === 2) {\n  // Feature detection for:\n  //  - Edison Mini Board\n  //  - Edison Arduino Board\n  //  - Intel Joule\n\n  if (Pin.IO.getPinCount() > 20) {\n    isMiniboard = true;\n  }\n\n  if (isMiniboard) {\n    // Edison Mini Board\n    // --------------------\n    //\n    // The Mini Board requires a completely unique\n    // pin capabilities definition.\n    //\n    pinModes = [\n      { modes: [0, 1, 3, 4] },\n      null,\n      null,\n      null,\n      { modes: [0, 1] },\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1, 3, 4] },\n      { modes: [0, 1] },\n      null,\n      null,\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1, 3, 4] },\n      { modes: [0, 1, 3, 4] },\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      null,\n      null,\n      null,\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      null,\n      null,\n      null,\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n      { modes: [0, 1] },\n    ];\n\n    aref = null;\n    vref = 1.8;\n\n  } else {\n    // Edison Arduino Board\n    // --------------------\n    //\n    // mraa does not support PWM on pin 10 and 11\n    // on the Edison Arduino Board (which only has 4 PWM channels),\n    // so we need to redefine those supported modes\n    // without PWM or SERVO.\n    // See discussion here:\n    // https://github.com/intel-iot-devkit/mraa/issues/52#issuecomment-65370890\n    //\n    pinModes[10].modes = [0, 1];\n    pinModes[11].modes = [0, 1];\n  }\n} else if (platformType === 13) {\n  // Intel Joule\n\n  isCarrierboard = true;\n\n  pinModes = [\n    null, // There is no pin with the number 0\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1, 3, 4] },\n    { modes: [0, 1] },\n    { modes: [0, 1, 3, 4] },\n    null,\n    { modes: [0, 1, 3, 4] },\n    null,\n    { modes: [0, 1, 3, 4] },\n    null,\n    null,\n    { modes: [0, 1] },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    null,\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    // These are actually the LEDs\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n    { modes: [0, 1] },\n  ];\n\n  aref = null;\n  vref = 1.8;\n}\n\nvar priv = new Map();\nvar boards = [];\nvar reporting = [];\n\nfunction read() {\n  if (read.isReading) {\n    return;\n  }\n  read.isReading = true;\n  read.interval = setInterval(function() {\n    var board, request, state;\n\n    // TODO: Limit to one read cycle per ms?\n    // Patches welcome for better approaches\n    // that maintain the semantics.\n\n    if (boards.length) {\n      board = boards[0];\n\n      if (reporting.length) {\n        reporting.forEach(function(report, gpio) {\n          var pin = board.pins[report.index];\n          if (pin && pin.read) {\n            processRead(board, report, pin.read());\n          }\n        });\n      }\n\n      // Experimental\n      // if (i2cQueue.length) {\n      //   state = priv.get(board);\n      //   request = i2cQueue.shift();\n      //   state.i2c.address(request.address);\n      //   state.i2c.write(request.buffer.toString(\"ascii\"));\n      // }\n    }\n  }, read.samplingInterval);\n}\n\nread.samplingInterval = 10;\n\nfunction processRead(board, report, value) {\n  value = +value;\n\n  if (report.scale) {\n    value = report.scale(value);\n  }\n\n  board.pins[report.index].value = value;\n  board.emit(report.event, value);\n}\n\nfunction Board(opts) {\n  Emitter.call(this);\n\n  if (!(this instanceof Board)) {\n    return new Board(opts);\n  }\n\n  opts = opts || {};\n\n  var awaiting = [];\n  var state = {\n    i2c: opts.i2c !== undefined ? Object.assign({}, opts.i2c) : null,\n  };\n\n  priv.set(this, state);\n\n  this.name = Pin.IO.getPlatformName();\n  this.isReady = false;\n  this.aref = aref;\n  this.vref = vref;\n\n  // TODO:\n  //\n  // Once raw sysfs/gpio support is dropped, the\n  // use of Promises will no longer be necessary\n  //\n  this.pins = pinModes.map(function(pin, index) {\n    if (pin === null) {\n      return;\n    }\n\n    pin.isMiniboard = isMiniboard;\n    pin.isCarrierboard = isCarrierboard;\n    pin.addr = typeof pin.analogChannel === \"number\" ?\n      \"A\" + pin.analogChannel : index;\n\n    // EXPERIMENTAL\n    //\n    // var gpio = new Pin(pin);\n    // awaiting.push(\n    //   new Promise(function(resolve) {\n    //     gpio.on(\"ready\", function() {\n    //       resolve();\n    //     });\n    //   })\n    // );\n    // return gpio;\n\n    return new Pin(pin);\n  }, this);\n\n  this.analogPins = this.pins.slice(14).map(function(pin, i) {\n    return i;\n  });\n\n  boards[0] = this;\n\n  // Connected to the device implicitly.\n  process.nextTick(this.emit.bind(this, \"connect\"));\n\n  // The \"ready event\" is needed to signal to Johnny-Five that\n  // communication with the Arduino pinouts is ready.\n  process.nextTick(function() {\n    this.isReady = true;\n    this.emit(\"ready\");\n  }.bind(this));\n}\n\nBoard.reset = function() {\n  reporting.length = 0;\n  read.isReading = false;\n  read.samplingInterval = 10;\n  clearInterval(read.interval);\n};\n\nBoard.prototype = Object.create(Emitter.prototype, {\n  constructor: {\n    value: Board\n  },\n  MODES: {\n    value: modes\n  },\n  HIGH: {\n    value: 1\n  },\n  LOW: {\n    value: 0\n  }\n});\n\n\nfunction ToPinIndex(pin) {\n  var offset = pin[0] === \"A\" ? 14 : 0;\n  var index;\n\n  if (isMiniboard || isCarrierboard) {\n    offset = 0;\n\n    if (typeof pin === \"string\") {\n      index = platformPinMapping[pin.toUpperCase()];\n\n\n      if (index !== undefined) {\n        return index;\n      }\n      return pin;\n    }\n  }\n\n  index = ((pin + \"\").replace(\"A\", \"\") | 0) + offset;\n\n  if (pinModes[index] != null) {\n    return index;\n  }\n}\n\nBoard.prototype.normalize = function(pin) {\n  if (isMiniboard || isCarrierboard) {\n    return ToPinIndex(pin);\n  }\n  // This mirrors the default normalization\n  // in Johnny-Five and is necessary for\n  // Arduino-based pin mappings.\n  if (typeof pin === \"string\" && pin[0] === \"A\") {\n    return parseInt(pin.slice(1), 10);\n  }\n  return pin;\n};\n\nBoard.prototype.pinMode = function(pin, mode) {\n  var pinIndex;\n  var gpioMode;\n\n  gpioMode = mode = +mode;\n\n  // Normalize ANALOG (input) mode to INPUT\n  if (mode === 2) {\n    gpioMode = 0;\n\n    if (typeof pin === \"number\") {\n      pin = \"A\" + pin;\n    }\n  }\n\n  if (isMiniboard || isCarrierboard) {\n    // If attempting to create an analog read pin...\n    if (mode === 2) {\n      throw new Error(Pin.IO.getPlatformName() + \" does not support Analog Input (ADC)\");\n    }\n  }\n\n  pinIndex = ToPinIndex(pin);\n  this.pins[pinIndex].mode = mode;\n  this.pins[pinIndex].isPwm = mode === 3 || mode === 4;\n\n  return this;\n};\n\nBoard.prototype.analogRead = function(pin, handler) {\n  var pinIndex;\n  var gpio;\n  var alias;\n  var event;\n\n  // Convert numeric analog pin numbers to \"A*\" format\n  if (typeof pin === \"number\") {\n    pin = \"A\" + pin;\n  }\n\n  pinIndex = ToPinIndex(pin);\n  gpio = this.pins[pinIndex].gpio;\n  alias = this.pins[pinIndex].analogChannel;\n  event = \"analog-read-\" + alias;\n\n  if (this.pins[pinIndex].mode !== this.MODES.ANALOG) {\n    this.pinMode(pin, this.MODES.ANALOG);\n  }\n\n  reporting[+gpio] = {\n    alias: alias,\n    event: event,\n    index: pinIndex,\n    scale: function(raw) {\n      return raw;\n    }\n  };\n\n  this.on(event, handler);\n\n  read();\n\n  return this;\n};\n\nBoard.prototype.digitalRead = function(pin, handler) {\n  var pinIndex = ToPinIndex(pin);\n  var gpio = this.pins[pinIndex].gpio;\n  var event = \"digital-read-\" + pin;\n\n  if (this.pins[pinIndex].mode !== this.MODES.INPUT) {\n    this.pinMode(pin, this.MODES.INPUT);\n  }\n\n  reporting[+gpio] = {\n    event: event,\n    index: pinIndex,\n  };\n\n  this.on(event, handler);\n\n  read();\n\n  return this;\n};\n\nBoard.prototype.analogWrite = function(pin, value) {\n  var pinIndex = ToPinIndex(pin);\n\n  if (this.pins[pinIndex].mode !== this.MODES.PWM) {\n    this.pinMode(pin, this.MODES.PWM);\n  }\n\n  this.pins[pinIndex].write(value);\n\n  return this;\n};\n\nBoard.prototype.digitalWrite = function(pin, value) {\n  var pinIndex = ToPinIndex(pin);\n\n  if (this.pins[pinIndex].mode !== this.MODES.OUTPUT) {\n    this.pinMode(pin, this.MODES.OUTPUT);\n  }\n\n  this.pins[pinIndex].write(value);\n\n  return this;\n};\n\nBoard.prototype.servoConfig = function(pin, min, max) {\n  var pinIndex = ToPinIndex(pin);\n\n  if (this.pins[pinIndex].mode !== this.MODES.SERVO) {\n    this.pinMode(pin, this.MODES.SERVO);\n  }\n\n  this.pins[pinIndex].servoConfig = {\n    min: min,\n    max: max,\n  };\n\n  return this;\n};\n\nBoard.prototype.servoWrite = function(pin, value) {\n  var pinIndex = ToPinIndex(pin);\n\n  if (this.pins[pinIndex].mode !== this.MODES.SERVO) {\n    this.pinMode(pin, this.MODES.SERVO);\n  }\n\n  this.pins[pinIndex].write(value);\n\n  return this;\n};\n\n[\n  \"pulseIn\",\n  \"pulseOut\",\n  \"queryPinState\",\n  \"stepperConfig\",\n  \"stepperStep\",\n\n  // TODO: Use UartOW to implement these\n  \"_sendOneWireRequest\",\n  \"_sendOneWireSearch\",\n  \"sendOneWireWriteAndRead\",\n  \"sendOneWireDelay\",\n  \"sendOneWireDelay\",\n  \"sendOneWireReset\",\n  \"sendOneWireRead\",\n  \"sendOneWireSearch\",\n  \"sendOneWireAlarmsSearch\",\n  \"sendOneWireConfig\",\n].forEach(function(method) {\n  Board.prototype[method] = function() {\n    throw new Error(method + \" is not yet implemented.\");\n  };\n});\n\nvar i2cBus = Pin.IO.getDefaultI2cBus();\n\nif (isMiniboard) {\n  i2cBus = 1;\n}\n\n// Map to Board.prototype.sendI2CConfig\nBoard.prototype.i2cConfig = function(opts) {\n  var state = priv.get(this);\n  var bus = i2cBus;\n\n  // An explicit bus was provided.\n  if (state.i2c !== null && typeof state.i2c.bus === \"number\") {\n    bus = state.i2c.bus;\n  }\n\n  // Initialize the I2C interface if none currently exists\n  if (!(state.i2c instanceof Pin.IO.I2c)) {\n    state.i2c = new Pin.IO.I2c(bus);\n\n    if (typeof opts === \"number\" || typeof opts === \"undefined\") {\n      opts = { delay: Number(opts) };\n    }\n\n    state.i2c.delay = opts.delay || 5;\n  }\n};\n\n// Map to Board.prototype.sendI2CWriteRequest\nBoard.prototype.i2cWrite = function(address, cmdRegOrData, inBytes) {\n  /**\n   * cmdRegOrData:\n   * [... arbitrary bytes]\n   *\n   * or\n   *\n   * cmdRegOrData, inBytes:\n   * command [, ...]\n   *\n   */\n  var state = priv.get(this);\n  var buffer;\n\n  if (state.i2c === null) {\n    this.i2cConfig();\n  }\n\n  // If i2cWrite was used for an i2cWriteReg call...\n  if (arguments.length === 3 &&\n      !Array.isArray(cmdRegOrData) &&\n      !Array.isArray(inBytes)) {\n\n    return this.i2cWriteReg(address, cmdRegOrData, inBytes);\n  }\n\n  // Fix arguments if called with Firmata.js API\n  if (arguments.length === 2) {\n    if (Array.isArray(cmdRegOrData)) {\n      inBytes = cmdRegOrData.slice();\n      cmdRegOrData = inBytes.shift();\n    } else {\n      inBytes = [];\n    }\n  }\n\n  buffer = new Buffer([cmdRegOrData].concat(inBytes));\n\n  // Only write if bytes provided\n  if (buffer.length) {\n    state.i2c.address(address);\n    state.i2c.write(buffer);\n\n    // Certain devices may not allow a batch value write.\n    // for (var i = 0; i < buffer.length; i++) {\n    //   state.i2c.write(buffer.toString(\"ascii\", i, i + 1));\n    // }\n  }\n\n  return this;\n};\n\nBoard.prototype.i2cWriteReg = function(address, register, value) {\n  var state = priv.get(this);\n\n  if (state.i2c === null) {\n    this.i2cConfig();\n  }\n\n  state.i2c.address(address);\n  state.i2c.writeReg(register, value);\n\n  return this;\n};\n\n\n// TODO: Refactor i2cRead and i2cReadOnce\n//      to share most operations.\n\n\nBoard.prototype.i2cRead = function(address, register, bytesToRead, callback) {\n  var state = priv.get(this);\n  var event = \"I2C-reply\" + address + \"-\";\n\n  if (state.i2c === null) {\n    this.i2cConfig();\n  }\n\n  // Fix arguments if called with Firmata.js API\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  callback = typeof callback === \"function\" ? callback : function() {};\n\n  event += register !== null ? register : 0;\n\n  this.on(event, callback);\n\n  setInterval(function() {\n    var data;\n\n    try {\n      state.i2c.address(address);\n\n      if (register !== null) {\n        data = state.i2c.readBytesReg(register, bytesToRead);\n      } else {\n        data = state.i2c.read(bytesToRead);\n      }\n    } catch (error) {\n      console.warn(\"I2C: Could not read %d Bytes from peripheral with address 0x%s\", bytesToRead, address.toString(16));\n    }\n\n    var values = [];\n\n    if (data && data.length === bytesToRead) {\n      for (var i = 0; i < bytesToRead; i++) {\n        values.push(data.readUInt8(i));\n      }\n    } else {\n      console.warn(\"I2C: Could not read %d Bytes from peripheral with address 0x%s\", bytesToRead, address.toString(16));\n    }\n\n    this.emit(event, values);\n  }.bind(this), read.samplingInterval);\n\n  return this;\n};\n\n// Map to Board.prototype.sendI2CReadRequest\nBoard.prototype.i2cReadOnce = function(address, register, bytesToRead, callback) {\n  var state = priv.get(this);\n  var event = \"I2C-reply\" + address + \"-\";\n\n  if (state.i2c === null) {\n    this.i2cConfig();\n  }\n\n  // Fix arguments if called with Firmata.js API\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  callback = typeof callback === \"function\" ? callback : function() {};\n\n  event += register !== null ? register : 0;\n\n  this.once(event, callback);\n\n  setTimeout(function() {\n    var data;\n\n    try {\n      state.i2c.address(address);\n\n      if (register !== null) {\n        data = state.i2c.readBytesReg(register, bytesToRead);\n      } else {\n        data = state.i2c.read(bytesToRead);\n      }\n    } catch (error) {\n      console.warn(\"I2C: Could not read %d Bytes from peripheral with address 0x%s\", bytesToRead, address.toString(16));\n    }\n\n    var values = [];\n\n    if (data && data.length === bytesToRead) {\n      for (var i = 0; i < bytesToRead; i++) {\n        values.push(data.readUInt8(i));\n      }\n    } else {\n      console.warn(\"I2C: Could not read %d Bytes from peripheral with address 0x%s\", bytesToRead, address.toString(16));\n    }\n\n    this.emit(event, values);\n  }.bind(this), 1);\n\n  return this;\n};\n\n// Necessary for Firmata.js compatibility.\nBoard.prototype.sendI2CWriteRequest = Board.prototype.i2cWrite;\nBoard.prototype.sendI2CReadRequest = Board.prototype.i2cReadOnce;\nBoard.prototype.sendI2CConfig = Board.prototype.i2cConfig;\n\n\nBoard.prototype.setSamplingInterval = function(ms) {\n  read.samplingInterval = Math.min(Math.max(ms, 0), 65535);\n  clearInterval(read.interval);\n  read();\n};\n\nBoard.Uart = Pin.IO.Uart;\nBoard.Spi = Pin.IO.Spi;\n// This is pretty sucky naming, but it makes more\n// sense on the dev/author end.\nBoard.Boards = {\n  Xadow: {\n    i2c: {\n      bus: 0x00\n    },\n  },\n  DFRobotRomeo: {\n    i2c: {\n      bus: 0x00\n    },\n  },\n  DFRobotIO: {\n    i2c: {\n      bus: 0x00\n    },\n  }\n};\n\nif (IS_TEST_ENV) {\n  Board.__carrierboard = function(enable) {\n    isCarrierboard = enable;\n  };\n  Board.__i2cBus = function(value) {\n    i2cBus = value;\n  };\n  Board.__io = Pin.IO;\n  Board.__miniboard = function(enable) {\n    isMiniboard = enable;\n  };\n  Board.__pinmodes = function(temp) {\n    if (Board.__pinmodes.original == null) {\n      Board.__pinmodes.original = pinModes.slice();\n      pinModes = temp;\n    } else {\n      pinModes = Board.__pinmodes.original.slice();\n      Board.__pinmodes.original = null;\n    }\n  };\n  Board.__platformPinMapping = function(temp) {\n    if (Board.__platformPinMapping.original == null) {\n      Board.__platformPinMapping.original = platformPinMapping;\n      platformPinMapping = temp;\n    } else {\n      platformPinMapping = Board.__platformPinMapping.original;\n      Board.__platformPinMapping.original = null;\n    }\n  };\n  Board.__read = read;\n}\n\nread();\n\nmodule.exports = Board;\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/lib/pin.js":"require(\"es6-shim\");\n\nvar IS_TEST_ENV = global.IS_TEST_ENV || false;\nvar remapped = require(\"remapped\");\nvar Emitter = require(\"events\").EventEmitter;\nvar priv = new Map();\nvar IO;\n\ntry {\n  IO = IS_TEST_ENV ?\n    require(\"../test/mraa-mock.js\") :\n    require(\"mraa\");\n\n} catch (e) {\n  IS_TEST_ENV = false;\n  console.warn(\"  NOTICE\");\n  console.warn(\"  --------------------------------\");\n  console.warn(\"  This OS image is no longer supported.\");\n  console.warn(\"  Please upgrade to any OS image that supports libmraa0.\");\n  console.warn(\"  --------------------------------\");\n  return;\n}\n\nfunction scale(value, inMin, inMax, outMin, outMax) {\n  return (value - inMin) * (outMax - outMin) /\n    (inMax - inMin) + outMin;\n}\n\nfunction constrain(value, min, max) {\n  return value > max ? max : value < min ? min : value;\n}\n\nvar dirRemapping = {\n  out: \"DIR_OUT\",\n  in: \"DIR_IN\",\n};\n\nvar pinRemapping = {\n  addr: \"addr\",\n  supportedModes: \"modes\",\n  analogChannel: \"analogChannel\",\n  isMiniboard: \"isMiniboard\"\n};\n\nvar defaults = {\n  analogChannel: null\n};\n\nvar MIN_PULSE_WIDTH = 600;\nvar MAX_PULSE_WIDTH = 2600;\nvar MAX_SERVO_PERIOD = 7968;\nvar MAX_PWM_PERIOD = 700;\n\nfunction Pin(setup) {\n  Emitter.call(this);\n\n  Object.assign(this, remapped(setup, pinRemapping, defaults));\n\n  this.isAnalog = setup.addr[0] === \"A\";\n  this.gpio = this.isAnalog ? this.analogChannel : this.addr;\n  this.report = 0;\n  this.value = 0;\n\n  var state = {\n    isPwm: false,\n    direction: null,\n    mode: null,\n    period: null,\n    io: null,\n    pwm: null,\n    servoConfig: {\n      min: MIN_PULSE_WIDTH,\n      max: MAX_PULSE_WIDTH\n    }\n  };\n\n  priv.set(this, state);\n\n  // this.emit.bind(this, \"ready\");\n  // process.nextTick(this.emit.bind(this, \"ready\"));\n}\n\nPin.prototype = Object.create(Emitter.prototype, {\n  constructor: {\n    value: Pin\n  },\n  mode: {\n    set: function(value) {\n      var state = priv.get(this);\n\n      state.mode = value;\n      state.isPwm = value === 3 || value === 4;\n\n      if (state.isPwm) {\n        if (state.pwm === null) {\n          state.pwm = new IO.Pwm(this.addr);\n        }\n        state.pwm.enable(true);\n      } else {\n\n        // Disable a previously enabled pwm\n        if (state.pwm) {\n          state.pwm.enable(false);\n        }\n\n        if (!this.isAnalog) {\n          this.direction = value ? \"out\" : \"in\";\n        }\n      }\n    },\n    get: function() {\n      return priv.get(this).mode;\n    }\n  },\n  isPwm: {\n    set: function(value) {\n      // ... no op?\n    },\n    get: function() {\n      return priv.get(this).isPwm;\n    }\n  },\n  servoConfig: {\n    set: function(params) {\n      var state = priv.get(this);\n      var config = Object.assign({}, {\n        min: MIN_PULSE_WIDTH,\n        max: MAX_PULSE_WIDTH\n      }, params);\n\n      state.servoConfig.min = config.min;\n      state.servoConfig.max = config.max;\n    },\n    get: function() {\n      var state = priv.get(this);\n    }\n  },\n  direction: {\n    set: function(value) {\n      var state = priv.get(this);\n      var direction = dirRemapping[value];\n\n      if (state.io === null) {\n        this.initialize();\n      }\n\n      state.io.dir(IO[direction]);\n      state.direction = value;\n    },\n    get: function() {\n      return priv.get(this).direction;\n    }\n  }\n});\n\nPin.prototype.initialize = function() {\n  var state = priv.get(this);\n\n  if (this.supportedModes.length) {\n    if (this.isAnalog) {\n      state.io = new IO.Aio(this.gpio);\n    } else {\n      state.io = new IO.Gpio(this.gpio);\n\n      // Use memory mapped IO instead of sysfs\n      state.io.useMmap(true);\n\n      // Physical pin state:\n      //    - dir: OUT (0)\n      //    - state: LOW (0)\n      //\n      // Internal pin state:\n      //    - direction: out\n\n      state.io.dir(0);\n      state.io.write(0);\n      state.direction = \"out\";\n    }\n  } else {\n    throw new Error(\"Pin: \" + this.gpio + \" does not support this action\");\n  }\n};\n\nPin.prototype.write = function(value) {\n  var state = priv.get(this);\n\n  if (state.isPwm) {\n    var isServo = this.mode === 4;\n    var period = isServo ? MAX_SERVO_PERIOD : MAX_PWM_PERIOD;\n\n    if (!state.pwm) {\n      state.pwm = new IO.Pwm(this.addr);\n      state.pwm.enable(true);\n    }\n\n    if (state.period !== period) {\n      state.pwm.period_us(period);\n      state.period = period;\n    }\n\n    if (isServo) {\n      // Convert degrees to pulse\n      state.pwm.pulsewidth_us(pulse(value, state.servoConfig));\n    } else {\n      // Convert 8 bit value to % of 1\n      state.pwm.write(scale(value, 0, 255, 0, 1));\n    }\n  } else {\n\n    if (state.io === null) {\n      this.initialize();\n    }\n\n    if (this.direction !== \"out\") {\n      this.direction = \"out\";\n    }\n\n    state.io.write(value);\n  }\n\n  this.value = value;\n};\n\nPin.prototype.read = function(value) {\n  var state = priv.get(this);\n\n  if (state.io === null) {\n    this.initialize();\n  }\n\n  this.value = state.isPwm && state.pwm !== null ?\n    state.pwm.read() :\n    state.io.read();\n\n  return this.value;\n};\n\nfunction pulse(value, config) {\n  if (value > 180) {\n    return config.max;\n  }\n\n  if (value < 0) {\n    return config.min;\n  }\n\n  return (config.min + (value / 180) * (config.max - config.min));\n}\n\nPin.IO = IO;\n\n\nmodule.exports = Pin;\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/analog-read.js":"// Use require(\"galileo-io\") when running from an npm installation\nvar repl = require(\"repl\");\nvar Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n  var last = 0;\n\n  this.pinMode(3, this.MODES.PWM);\n  this.pinMode(\"A0\", this.MODES.ANALOG);\n\n  this.analogRead(\"A0\", function(data) {\n    var value = scale(data, 0, 1023, 0, 255) | 0;\n    if (last !== value) {\n      this.analogWrite(3, value);\n    }\n    last = value;\n  });\n});\n\n\nfunction scale(value, inMin, inMax, outMin, outMax) {\n  return (value - inMin) * (outMax - outMin) /\n    (inMax - inMin) + outMin;\n}\n\n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\n\n// Create a one time data event handler for initializing\n// the repl session via keyboard input\nprocess.stdin.once(\"data\", function() {\n  console.log(\"Initialized\");\n\n  var replDefaults = {\n    prompt: \">> \",\n    useGlobal: false\n  };\n\n  var cmd = repl.start(replDefaults);\n\n  cmd.on(\"exit\", function() {\n    console.log(\"Exit!\");\n    process.reallyExit();\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/analog-write.js":"var Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n\n  this.pinMode(3, this.MODES.PWM);\n\n  var level = 0;\n  var step = 5;\n\n  setInterval(function() {\n    if (level > 255 || level < 0) {\n      step *= -1;\n    }\n\n    level += step;\n\n    this.analogWrite(3, level);\n  }.bind(this), 1000/(255/step));\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/blink.js":"// Use require(\"galileo-io\") when running from an npm installation\nvar Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n  var byte = 0;\n\n\n\n  setInterval(function() {\n    board.digitalWrite(13, (byte ^= 1));\n  }, 500);\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/button.js":"// Use require(\"galileo-io\") when running from an npm installation\nvar Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY!\");\n\n  var value = 0;\n  this.digitalRead(4, function(data) {\n    if (value !== data) {\n      if (data) {\n        console.log(\"Pressed\");\n        this.digitalWrite(3, 1);\n      } else {\n        console.log(\"Released\");\n        this.digitalWrite(3, 0);\n      }\n    }\n    value = data;\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/digital-read.js":"// Use require(\"galileo-io\") when running from an npm installation\nvar Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n  this.digitalRead(9, function(data) {\n    console.log(9, data);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/i2c-write.js":"var Galileo = require(\"galileo-io\");\nvar board = new Galileo();\n\nvar BlinkM = {\n  0x09: \"ADDRESS\",\n  0x63: \"FADE_TO_RGB\",\n  0x43: \"FADE_TO_RANDOM_RGB\",\n  0x70: \"SCRIPT_PLAY\",\n  0x6f: \"SCRIPT_STOP\",\n  0x6e: \"SET_RGB\",\n  0x67: \"GET_RGB\",\n};\n\nObject.keys(BlinkM).forEach(function(key) {\n  // Turn the value into a key and\n  // the key into an int value\n  BlinkM[BlinkM[key]] = key | 0;\n});\n\nvar rgb = {\n  red:    [0xff, 0x00, 0x00],\n  orange: [0xff, 0x7f, 0x00],\n  yellow: [0xff, 0xff, 0x00],\n  green:  [0x00, 0xff, 0x00],\n  blue:   [0x00, 0x00, 0xff],\n  indigo: [0x31, 0x00, 0x62],\n  violet: [0x4b, 0x00, 0x82],\n  white:  [0xff, 0xff, 0xff],\n};\n\nvar rainbow = Object.keys(rgb).reduce(function(colors, color) {\n  // While testing, I found that the BlinkM produced\n  // more vibrant colors when provided a 7 bit value.\n  return (colors[color] = rgb[color].map(to7bit), colors);\n}, {});\n\nvar colors = Object.keys(rainbow);\nvar index = 0;\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n\n  // http://thingm.com/fileadmin/thingm/downloads/BlinkM_datasheet.pdf\n  this.i2cWrite(BlinkM.ADDRESS, BlinkM.SCRIPT_STOP);\n\n  this.i2cWrite(BlinkM.ADDRESS, BlinkM.SET_RGB, [0, 0, 0]);\n\n  setInterval(function() {\n    var color = colors[index++];\n\n    this.i2cWrite(BlinkM.ADDRESS, BlinkM.FADE_TO_RGB, rainbow[color]);\n\n    this.i2cRead(BlinkM.ADDRESS, BlinkM.GET_RGB, 3, function(data) {\n      console.log(\"RGB: [%s]\", data);\n    });\n\n    if (index === colors.length) {\n      index = 0;\n    }\n  }.bind(this), 1000);\n});\n\nfunction scale(value, inMin, inMax, outMin, outMax) {\n  return (value - inMin) * (outMax - outMin) /\n    (inMax - inMin) + outMin;\n}\n\nfunction to7bit(value) {\n  return scale(value, 0, 255, 0, 127) | 0;\n}\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/leds-all.js":"var Galileo = require(\"galileo-io\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"Leds on pins 2-13 should be blinking.\");\n\n  for (var i = 2; i < 14; i++) {\n    this.pinMode(i, this.MODES.OUTPUT);\n  }\n\n  var state = 0;\n\n  setInterval(function() {\n    state ^= 1;\n    for (var i = 2; i < 14; i++) {\n      this.digitalWrite(i, state);\n    }\n  }.bind(this), 500);\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/servo-write.js":"// Use require(\"galileo-io\") when running from an npm installation\nvar Galileo = require(\"../lib/galileo\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  console.log(\"READY\");\n\n  this.pinMode(3, this.MODES.SERVO);\n\n  var positions = [0, 45, 90, 135, 180];\n  var index = 0;\n\n  setInterval(function() {\n    var degrees = positions[index];\n\n    this.servoWrite(3, degrees);\n    console.log( \"Moving to %d\", degrees );\n\n    index++;\n\n    if (index === positions.length) {\n      index = 0;\n    }\n  }.bind(this), 2000);\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/eg/uart-johnny-five-serialport.js":"var Serialport = require(\"serialport\").SerialPort;\nvar five = require(\"johnny-five\");\nvar Edison = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Edison()\n});\n\nboard.on(\"ready\", function() {\n  var sp = new Serialport(\"/dev/ttyMFD1\", {\n    baudRate: 115200\n  });\n\n  sp.on(\"open\", function() {\n    console.log(\"Port is open!\");\n\n    // Once the port is open, you may read or write to it.\n    sp.on(\"data\", function(data) {\n      console.log(\"Received: \", data);\n    });\n\n    sp.write(new Buffer([0]));\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/scripts/postinstall.js":"process.exit();\n\nrequire(\"es6-shim\");\n\nvar exec = require(\"child_process\").exec;\nvar os = require(\"os\");\nvar useMraa = (function() {\n  var release = os.release();\n  return release.includes(\"yocto\") ||\n    release.includes(\"edison\") ||\n    process.env.MRAA_VERSION;\n})();\n\nvar safeBuild = \"0.9.4\";\nvar safeVersion = \"0.9.4\";\nvar npmCommand = \"npm install mraa@\" + safeVersion;\n\nif (useMraa) {\n  console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n  console.log(\"  Do not quit the program until npm completes the installation process.  \");\n  console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n  exec(\"opkg info libmraa0\", function(error, stdout, stderr) {\n    if (error) {\n      var opkgError = error;\n      exec(npmCommand, function(error, stdout, stderr) {\n        if (error) {\n          console.log(\"opkg info libmraa0 failed.\")\n          console.log(\"npm install mraa failed.\")\n          console.log(\"Reasons: \");\n          console.log(\"    %s   %s\", opkgError.code, opkgError.message);\n          console.log(\"    %s   %s\", error.code, error.message);\n          process.exit(error.code);\n        } else {\n          console.log(\"\");\n          process.exit(0);\n        }\n      });\n    } else {\n      if (!stdout.includes(safeBuild)) {\n        console.log(\"\");\n        console.log(\"  Galileo-IO needs to install a trusted version of libmraa0.\");\n        console.log(\"  This process takes approximately one minute.\");\n        console.log(\"  Thanks for your patience.\");\n\n        exec(npmCommand, function(error) {\n          if (error) {\n            console.log(\"npm install mraa failed. Reason: \" + error);\n            process.exit(error.code);\n          } else {\n            console.log(\"  Completed!\");\n            console.log(\"\");\n            process.exit(0);\n          }\n        });\n      } else {\n        process.exit(0);\n      }\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-galileo-io/node_modules/galileo-io/lib/pin-mapping/index.js":"// The number property names correspond\n// to the mraa platform type.\nmodule.exports = {\n  2: require(\"./edison.json\"),\n  13: require(\"./joule.json\"),\n};\n\n"}